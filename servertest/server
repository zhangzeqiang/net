#ifndef __SERVER_H__
#define __SERVER_H__

#include <iostream>
#include <event.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <sys/unistd.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>

#include "communicate.h"

using namespace std;

// 配置

namespace Server {
    struct sock_ev {
        struct event* read_ev;
        struct event* write_ev;
        int fd;
    };

    // 事件
    struct event_base* base;
    char* SERVERADDR; 
    int PORT;

    void onRead(int iCliFd, short iEvent, void *arg); 
    void onAccept(int iSvrFd, short iEvent, void *arg); 
    void config (const char* ip, const char* port);
    void run ();
    void *onAcceptThread (void *arg);

    void config (char* ip, int port) {
        PORT = port;
        SERVERADDR = ip;
    }

    void onRead(int iCliFd, short iEvent, void *arg) 
    { 
        int iLen; 
        char buf[1500]; 
        struct sock_ev *ev = (struct sock_ev*) arg; 

        // cout<< "等待客户端数据... " << endl;
        iLen = read (iCliFd, buf, sizeof (buf)); 
       
        if (iLen <= 0) { 
            cout << "客户机断开连接..." << endl; 
            event_del (ev->read_ev);
            return;
        }

        buf[iLen] = 0;
        onResolve (iCliFd, buf);
    }

    void onAccept(int iSvrFd, short iEvent, void *arg) 
    { 
        int *iptr; 
        struct sockaddr_in sCliAddr; 
        cout<< "客户端新连接... " << endl;
       
        socklen_t iSinSize = sizeof(sCliAddr); 

        struct sock_ev *ev = (struct sock_ev*) malloc (sizeof (struct sock_ev));

        ev->fd = accept(iSvrFd, (struct sockaddr*)&sCliAddr, &iSinSize); 
        
        pthread_t tid;
        // 新线程
        pthread_create (&tid, NULL, onAcceptThread, ev);
    }

    // 新线程
    void *onAcceptThread (void *arg) {
        struct sock_ev *ev = (struct sock_ev *)arg;
        int iCliFd = ev->fd;
        // 创建新线程执行
        struct event_base* pthread_base = event_base_new ();
  
        ev->read_ev = event_new(pthread_base, iCliFd, EV_READ|EV_PERSIST, onRead, ev); 
        event_add (ev->read_ev, NULL);
        
        event_base_dispatch (pthread_base);  

        event_free (ev->read_ev);
        event_base_free (pthread_base);

        // 连接结束=0 | 连接错误<0, 将事件池删除并释放内存空间
        close(iCliFd); 
        onClose (iCliFd);
         
        free (arg);
    } 
    
    void run () {
        int iSvrFd;   
        struct sockaddr_in sSvrAddr; 
                 
        memset(&sSvrAddr, 0, sizeof(sSvrAddr));   
        sSvrAddr.sin_family = AF_INET;   
        // 只能本地访问
        // sSvrAddr.sin_addr.s_addr = inet_addr(SERVERADDR);     

        // 任意ip可以访问
        sSvrAddr.sin_addr.s_addr = htonl(INADDR_ANY);     
        sSvrAddr.sin_port = htons(PORT);
        iSvrFd = socket(AF_INET, SOCK_STREAM, 0);   
        bind(iSvrFd, (struct sockaddr*)&sSvrAddr, sizeof(sSvrAddr));   
        listen(iSvrFd, 10);

        /** 初始化UserLists列表 */
        emptyUserLists();

        Server::base = event_base_new ();
        cout<< "服务器成功启动" << endl;
        struct event *evListen;

        // 设置事件 
        evListen = event_new(Server::base, iSvrFd, EV_READ|EV_PERSIST, onAccept, NULL);
        // 设置为base事件 
        event_add(evListen, NULL); 
        // 事件循环 
        event_base_dispatch(Server::base); 

        // 释放事件池
        event_free(evListen);
        event_base_free(Server::base);
    }
};

#endif /** __SERVER_H__ */


